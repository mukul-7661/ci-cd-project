name: CI/CD Pipeline

on:
  push:
    branches:
      - master # Adjust the branch name as needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push Docker image
        run: |
          docker build -t ci-cd-project .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker tag ci-cd-project:latest mukul7661/ci-cd-project
          docker push mukul7661/ci-cd-project

      # - name: Create SSH key file
      #   run: |
      #     echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/ec2_key
      #     chmod 600 ~/.ssh/ec2_key
      #     eval $(ssh-agent -s)
      #     ssh-add ~/.ssh/ec2_key
      #     # Optional: Verify that the key is added to the SSH agent
      #     ssh-add -l

      - name: Set up SSH key
        run: |
          touch private_key
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key
          chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }} '
          docker stop ci-cd || true
          docker rm -f ci-cd || true
          docker pull mukul7661/ci-cd-project:latest
          docker run -d --env-file myenv.env --name ci-cd -p 80:8000 mukul7661/ci-cd-project:latest
          '



          # ssh-keyscan -t rsa $EC2_HOST >> ~/.ssh/known_hosts
          # chmod 644 ~/.ssh/known_hosts
          # echo

      # - name: SSH into EC2 instance and deploy
      #    run: |
      #     ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }}
      # uses: appleboy/ssh-action@master
      # with:
      #   host: ${{ secrets.EC2_HOST }} # IP address or hostname of your EC2 instance
      #   username: ubuntu # The SSH username for your EC2 instance
      #   key: ${{ secrets.EC2_PRIVATE_KEY }} # Your private SSH key, stored as a GitHub secret
      #   script: |
      # ls
      # ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }}
      # << EOF
      #   ls
      #   docker stop ci-cd || true
      #   docker rm ci-cd || true
      #   docker pull mukul7661/ci-cd-project:latest
      #   docker run -d --env-file myenv.env --name ci-cd -p 8080:8000 mukul7661/ci-cd-project:latest
      #   # Add any other commands you need to run on the server here
      # EOF

      # - name: Run tests
      #   run: npm test
